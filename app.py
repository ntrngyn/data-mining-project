from flask import Flask, render_template, request
import joblib
import pandas as pd
import numpy as np

app = Flask(__name__)

# Load Random Forest model, scaler, and label encoder
rf_model = joblib.load('rf_model.pkl')
scaler = joblib.load('scaler.pkl')
label_encoder = joblib.load('label_encoder.pkl')

@app.route('/', methods=['GET', 'POST'])
def home():
    prediction_text = ""
    age = systolic = diastolic = bs = bodytemp = heartrate = ""
    temp_unit = "C"

    if request.method == 'POST':
        try:
            # L·∫•y d·ªØ li·ªáu t·ª´ form
            age = float(request.form.get('age', 25))
            systolic = float(request.form.get('systolic', 110))
            diastolic = float(request.form.get('diastolic', 70))
            bs = float(request.form.get('bs', 6))
            bodytemp = float(request.form.get('bodytemp', 37))
            heartrate = float(request.form.get('heartrate', 80))
            temp_unit = request.form.get('temp_unit', 'C')

            # Ki·ªÉm tra v√† chuy·ªÉn ƒë·ªïi nhi·ªát ƒë·ªô n·∫øu l√† ƒë·ªô F
            if temp_unit == 'F':
                if not (86 <= bodytemp <= 113):
                    raise ValueError("Nhi·ªát ƒë·ªô ¬∞F ph·∫£i n·∫±m trong kho·∫£ng 86‚Äì113.")
                bodytemp = ((bodytemp - 32) * 5 / 9).__round__(1) 
                temp_unit = 'C'
            else:
                if not (30 <= bodytemp <= 45):
                    raise ValueError("Nhi·ªát ƒë·ªô ¬∞C ph·∫£i n·∫±m trong kho·∫£ng 30‚Äì45.")

            # Ki·ªÉm tra c√°c gi√° tr·ªã b·∫•t th∆∞·ªùng
            # Ki·ªÉm tra c√°c gi√° tr·ªã b·∫•t th∆∞·ªùng
            abnormal_conditions = []
            if age > 45:
                abnormal_conditions.append("Tu·ªïi c·ªßa b·∫°n (>45) kh√° l·ªõn, l√† y·∫øu t·ªë nguy c∆° cao trong thai k·ª≥.")
            if age < 17:
                abnormal_conditions.append("Tu·ªïi c·ªßa b·∫°n (<17) qu√° nh·ªè, l√† y·∫øu t·ªë nguy c∆° cao trong thai k·ª≥.")
            if systolic > 140:
                abnormal_conditions.append(f"Huy·∫øt √°p t√¢m thu ({systolic} mmHg) cao h∆°n m·ª©c b√¨nh th∆∞·ªùng (90‚Äì140 mmHg).")
            elif systolic < 90:
                abnormal_conditions.append(f"Huy·∫øt √°p t√¢m thu ({systolic} mmHg) th·∫•p h∆°n m·ª©c b√¨nh th∆∞·ªùng (90‚Äì140 mmHg).")
            if diastolic > 90:
                abnormal_conditions.append(f"Huy·∫øt √°p t√¢m tr∆∞∆°ng ({diastolic} mmHg) cao h∆°n m·ª©c b√¨nh th∆∞·ªùng (60‚Äì90 mmHg).")
            elif diastolic < 60:
                abnormal_conditions.append(f"Huy·∫øt √°p t√¢m tr∆∞∆°ng ({diastolic} mmHg) th·∫•p h∆°n m·ª©c b√¨nh th∆∞·ªùng (60‚Äì90 mmHg).")
            if bs > 7.0:
                abnormal_conditions.append(f"Ch·ªâ s·ªë ƒë∆∞·ªùng huy·∫øt ({bs} mmol/L) cao h∆°n m·ª©c b√¨nh th∆∞·ªùng (3.9‚Äì7.0 mmol/L).")
            elif bs < 3.9:
                abnormal_conditions.append(f"Ch·ªâ s·ªë ƒë∆∞·ªùng huy·∫øt ({bs} mmol/L) th·∫•p h∆°n m·ª©c b√¨nh th∆∞·ªùng (3.9‚Äì7.0 mmol/L).")
            if bodytemp > 38:
                abnormal_conditions.append(f"Nhi·ªát ƒë·ªô c∆° th·ªÉ ({bodytemp:.1f} ¬∞C) cao h∆°n m·ª©c b√¨nh th∆∞·ªùng (36‚Äì38 ¬∞C).")
            elif bodytemp < 36:
                abnormal_conditions.append(f"Nhi·ªát ƒë·ªô c∆° th·ªÉ ({bodytemp:.1f} ¬∞C) th·∫•p h∆°n m·ª©c b√¨nh th∆∞·ªùng (36‚Äì38 ¬∞C).")
            if heartrate > 100:
                abnormal_conditions.append(f"Nh·ªãp tim ({heartrate} bpm) cao h∆°n m·ª©c b√¨nh th∆∞·ªùng (60‚Äì100 bpm).")
            elif heartrate < 60:
                abnormal_conditions.append(f"Nh·ªãp tim ({heartrate} bpm) th·∫•p h∆°n m·ª©c b√¨nh th∆∞·ªùng (60‚Äì100 bpm).")

            # T·∫°o DataFrame ƒë·∫ßu v√†o
            input_data = pd.DataFrame([[age, systolic, diastolic, bs, bodytemp, heartrate]],
                                      columns=['Age', 'SystolicBP', 'DiastolicBP', 'BS', 'BodyTemp', 'HeartRate'])

            # Chu·∫©n h√≥a d·ªØ li·ªáu v√† d·ª± ƒëo√°n
            input_scaled = scaler.transform(input_data)
            prediction = rf_model.predict(input_scaled)[0]
            prediction_label = label_encoder.inverse_transform([prediction])[0]

            # √Ånh x·∫° nh√£n sang ti·∫øng Vi·ªát
            label_map = {
                'high risk': 'R·ªßi ro cao',
                'mid risk': 'R·ªßi ro trung b√¨nh',
                'low risk': 'R·ªßi ro th·∫•p'
            }
            prediction_vn = label_map.get(prediction_label.lower(), 'Kh√¥ng x√°c ƒë·ªãnh')

            # √Ånh x·∫° nh√£n sang ti·∫øng Vi·ªát
            if prediction_label.lower() == 'low risk':
                prediction_text = (
                    f'''
                    <div style="border-radius: 8px; border: 2px solid #4CAF50; background-color: #E8F5E9; padding: 20px; margin: 15px 0;">
                        <h6 style="color: #2E7D32; font-size: 20px; font-weight: bold; text-align: center;">{prediction_vn}</h6>
                        <p style="color: #1B5E20; font-weight: 500; font-size: 16px;">
                            ‚úÖ <strong>T·ªët:</strong> K·∫øt qu·∫£ cho th·∫•y r·ªßi ro th·∫•p. Ti·∫øp t·ª•c duy tr√¨ l·ªëi s·ªëng l√†nh m·∫°nh v√† ki·ªÉm tra s·ª©c kh·ªèe ƒë·ªãnh k·ª≥.
                        </p>
                    </div>
                    '''
                )
            elif prediction_label.lower() == 'mid risk':
                prediction_text = (
                    f'''
                    <div style="border-radius: 8px; border: 2px solid #FFA726; background-color: #FFF8E1; padding: 20px; margin: 15px 0;">
                        <h6 style="color: #F57C00; font-size: 20px; font-weight: bold; text-align: center;">{prediction_vn}</h6>
                        <p style="color: #E65100; font-weight: 500; font-size: 16px;">
                            ‚ö†Ô∏è <strong>Ch√∫ √Ω:</strong> K·∫øt qu·∫£ cho th·∫•y r·ªßi ro trung b√¨nh. B·∫°n n√™n tham kh·∫£o √Ω ki·∫øn b√°c sƒ© v√† theo d√µi s·ª©c kh·ªèe th∆∞·ªùng xuy√™n.
                        </p>
                    </div>
                    '''
                )
            else:  # high risk
                prediction_text = (
                    f'''
                    <div style="border-radius: 8px; border: 2px solid #E53935; background-color: #FFEBEE; padding: 20px; margin: 15px 0;">
                        <h6 style="color: #D32F2F; font-size: 20px; font-weight: bold; text-align: center;">{prediction_vn}</h6>
                        <p style="color: #B71C1C; font-weight: 500; font-size: 16px;">
                            üö® <strong>C·∫£nh b√°o:</strong> K·∫øt qu·∫£ cho th·∫•y r·ªßi ro cao. Vui l√≤ng ƒë·∫øn c∆° s·ªü y t·∫ø ngay l·∫≠p t·ª©c ƒë·ªÉ ƒë∆∞·ª£c ki·ªÉm tra v√† t∆∞ v·∫•n.
                        </p>
                    </div>
                    '''
                )

            # Giao di·ªán cho ph·∫ßn ch·ªâ s·ªë b·∫•t th∆∞·ªùng (n·∫øu c√≥)
            if abnormal_conditions:
                prediction_text += (
                    f'''
                    <div style="border-radius: 8px; border: 1.5px dashed #9C27B0; background-color: #F3E5F5; padding: 15px; margin-top: 10px;">
                        <p style="color: #4A148C; font-weight: bold; font-size: 16px; margin-bottom: 10px;">
                            üéØ <strong>L∆∞u √Ω th√™m:</strong> M·ªôt s·ªë ch·ªâ s·ªë c·ªßa b·∫°n ƒëang b·∫•t th∆∞·ªùng:
                        </p>
                        <ul style="margin-left: 20px; color: #4A148C; font-weight: 500;">
                            {"".join([f"<li>{condition}</li>" for condition in abnormal_conditions])}
                        </ul>
                        <p style="color: #4A148C; font-weight: bold; font-size: 15px;">
                            Vui l√≤ng ƒë·∫øn b√°c sƒ© ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n v√† ki·ªÉm tra s·ª©c kh·ªèe k·ªãp th·ªùi.
                        </p>
                    </div>
                    '''
                )

        except Exception as e:
            prediction_text = f"‚ùå L·ªói: {str(e)}"

    return render_template('index.html',
                           prediction_text=prediction_text,
                           age=age,
                           systolic=systolic,
                           diastolic=diastolic,
                           bs=bs,
                           bodytemp=bodytemp,
                           heartrate=heartrate,
                           temp_unit=temp_unit)

if __name__ == '__main__':
    app.run(debug=True)